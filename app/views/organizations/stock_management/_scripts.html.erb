<script type="text/x-template" id="table-incoming-stock">
	<table class="ui selectable table">
	  <thead>
	    <tr>
	    	<th>Item</th>
		    <th>Source</th>
		    <th>Received by</th>
		    <th>Quantity</th>
		    <th>Stored</th>
		    <th>Date</th>
		    <th></th>
		  </tr>
	  </thead>
	  <tbody>
			<tr v-for="stock in stocks">
			  <td>
          {{stock.stock_item.name}}
			  </td>
			  <td>{{stock.stock_source.name}}</td>
			  <td>{{Boolean(stock.receiver) ? stock.receiver.name : "--"}}</td>
			  <td>{{stock.quantity}}</td>
			  <td>{{stock.quantity_stored}}</td>
			  <td>{{when(stock)}}</td>
			  <td>
          <div v-if="itemPending(stock)" class="ui button" @click="setCacheAndStore(stock)">Store</div>
          <i v-if="!itemPending(stock)" class="checkmark icon"></i>
        </td>
			</tr>
		</tbody>
	</table>
</script>
<script>
Vue.component('table-incoming-stock', {
  props: ['stocks'],
  template: '#table-incoming-stock',
  methods:{
    when(stock) {
      return Boolean(stock.arrived_at) ? moment(stock.arrived_at, "YYYY-MM-DD").fromNow() : "--";
    },
    itemPending(stock){
      return (stock.quantity - stock.quantity_stored) > 0
    },
    setCacheAndStore(obj){
      this.$parent.setCache(obj);
      this.$parent.toggleFilledNewStoredStockModal();
    }
  } 
});
var stockManagement = new Vue({
  el: "#stock-management",
  data: {
    cache: {},
    organization: <%= @organization.to_json.html_safe %>,
    stockTypes: [],
    stockItems: [],
    storages: [],
    storedStocks: [],
    stockSources: [],
    incomingStocks: [],
    storedItems: [],
    customers: [],
    customerOrders: [],
    newStockType: {},
    newStockItem: {},
    newStorage: {},
    newStockSource: {},
    newIncomingStock: {},
    newStoredStock: {},
    newCustomer: {},
    newCustomerOrder: {
      ordered_stocks: [],
    },
    newOrderedStock: {
      cost: 0,
    },
    locationTypes: [],
    locations: [],
    newLocation: {
      locationType: {},
    },
  },
  methods: {
    setCache(object){
      this.cache = object
    },
    getStockTypes(){
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/stock_types.json",
        success: function(res){
          that.stockTypes = res;
        }, error: function(err){displayAlert(err)}
      });
    },
    getStockItems(){
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/stock_items.json",
        success: function(res){
          that.stockItems = res;
        }, error: function(err){displayAlert(err)}
      });
    },
    getStorages(){
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/storages.json",
        success: function(res){
          that.storages = res;
        }, error: function(err){displayAlert(err)}
      });
    },
    getStockSources(){
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/stock_sources.json",
        success: function(res){
          that.stockSources = res;
        }, error: function(err){displayAlert(err)}
      });
    },
    getIncomingStocks(){
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/incoming_stocks.json",
        success: function(res){
          that.incomingStocks = res;
        }, error: function(err){displayAlert(err)}
      });
    },
    getStoredItems(){
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/stored_stocks.json",
        success: function(res){
          that.storedStocks = res;
        }, error: function(err){displayAlert(err)}
      });
    },
    getCustomers(){
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/customers.json",
        success: function(res){
          that.customers = res;
        }, error: function(err){displayAlert(err)}
      });
    },
    getCustomerOrders(){
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/customer_orders.json",
        success: function(res){
          that.customerOrders = res;
        }, error: function(err){displayAlert(err)}
      });
    },
    addStockType(){
      this.newStockType.organization_id = <%= @organization.id %>
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/stock_types.json",
        method: "POST",
        data: { 
          stock_type: that.newStockType 
        },
        success: function(res){
          that.stockTypes.push(res);
          that.newStockType = {}
          that.toggleNewStockTypeModal();
        },
        error: function(err){displayAlert(err)}
      });
    },
    addStockItem(){
      this.newStockItem.organization_id = <%= @organization.id %>
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/stock_items.json",
        method: "POST",
        data: { 
          stock_item: that.newStockItem 
        },
        success: function(res){
          that.stockItems.push(res);
          that.newStockItem = {}
          that.toggleNewStockItemModal();
        },
        error: function(err){displayAlert(err)}
      });
    },
    addStorage(){
      this.newStorage.organization_id = <%= @organization.id %>
      this.newStorage.location_id = this.newStorage.location.id
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/storages.json",
        method: "POST",
        data: { 
          storage: that.newStorage 
        },
        success: function(res){
          that.storages.push(res);
          that.newStorage = {}
          that.toggleNewStorageModal();
        },
        error: function(err){displayAlert(err)}
      });
    },
    addStockSource(){
      this.newStockSource.organization_id = <%= @organization.id %>
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/stock_sources.json",
        method: "POST",
        data: { 
          stock_source: that.newStockSource
        },
        success: function(res){
          that.stockSources.push(res);
          that.newStockSource = {}
          that.toggleNewStockSourceModal();
        },
        error: function(err){displayAlert(err)}
      });
    },
    addIncomingStock(){
      this.newIncomingStock.organization_id = <%= @organization.id %>
      var that = this;
      if (!Boolean(that.newStoredStock.receiver_id))
        that.newIncomingStock.receiver_id = <%= current_user.id %>

      $.ajax({
        url: "/organizations/<%= @organization.id %>/incoming_stocks.json",
        method: "POST",
        data: { 
          incoming_stock: that.newIncomingStock
        },
        success: function(res){
          that.incomingStocks.push(res);
          that.newIncomingStock = {}
          that.toggleNewIncomingStock();
        },
        error: function(err){displayAlert(err)}
      });
    },
    addStoredStock(isfilled){
      this.newStoredStock.organization_id = <%= @organization.id %>
      var that = this;
      if (!Boolean(isfilled)){
        this.newStoredStock.stock_item_id = this.getStockItemId(this.newStoredStock.incoming_stock_id);
      }else{
        this.newStoredStock.incoming_stock_id = this.cache.id
        this.newStoredStock.stock_item_id = this.cache.stock_item.id
      }

      $.ajax({
        url: "/organizations/<%= @organization.id %>/stored_stocks.json",
        method: "POST",
        data: { 
          stored_stock: that.newStoredStock
        },
        success: function(res){
          that.storedStocks.push(res);
          //subtract quantity from incoming_stock selected
          that.incomingStocks.find(function(el){
            if (el.id == res.incoming_stock.id){
              el.quantity_stored = (el.quantity_stored + res.quantity)
              return true
            }
          })
          that.newStoredStock = {}
          if (!Boolean(isfilled))
            that.toggleNewStoredStockModal();
          else
            that.toggleFilledNewStoredStockModal();
        },
        error: function(err){displayAlert(err)}
      });
    },
    addCustomer(){
      this.newCustomer.organization_id = <%= @organization.id %>
      var that = this;
      
      $.ajax({
        url: "/organizations/<%= @organization.id %>/customers.json",
        method: "POST",
        data: { 
          customer: that.newCustomer
        },
        success: function(res){
          that.customers.push(res);
          that.newCustomer = {}
          that.toggleNewCustomerModal();
        },
        error: function(err){displayAlert(err)}
      });
    },
    addCustomerOrder(){
      this.newCustomerOrder.organization_id = <%= @organization.id %>
      this.newCustomerOrder.ordered_stocks.organization_id = <%= @organization.id %>
      var that = this;
      
      $.ajax({
        url: "/organizations/<%= @organization.id %>/customer_orders.json",
        method: "POST",
        data: { 
          customer_order: that.newCustomerOrder,
          ordered_stocks: that.newCustomerOrder.ordered_stocks
        },
        success: function(res){
          that.customerOrders.push(res);
          that.newCustomerOrder = {}
          that.toggleNewCustomerOrderModal();
        },
        error: function(err){displayAlert(err)}
      });
    },
    toggleNewStockTypeModal(){
      $('#new-stock-type-modal').modal('toggle');
    },
    toggleNewStockItemModal(){
      $('#new-stock-item-modal').modal('toggle');
    },
    toggleNewStorageModal(){
      $('#new-storage-modal').modal('toggle');
    },
    toggleNewStockSourceModal(){
      $('#new-stock-source-modal').modal('toggle');
    },
    toggleNewIncomingStock(){
      $('#new-incoming-stock').toggle('fast', function(){
        $('#new-incoming-stock-button').toggle('fast')
      });
    },
    toggleNewStoredStockModal(){
      $('#new-stored-stock-modal').modal('toggle');
    },
    toggleFilledNewStoredStockModal(){
      $('#new-filled-stored-stock-modal').modal('toggle');
    },
    toggleNewCustomerModal(){
      $('#new-customer-modal').modal('toggle');
    },
    toggleNewCustomerModal(){
      $('#new-customer-modal').modal('toggle');
    },
    toggleNewCustomerOrderModal(){
      $('#new-customer-order-modal').modal('toggle');
    },
    getStockItemId(val){
      return (this.incomingStocks.find(function(el){
        return el.id == val;
      })).stock_item.id;
    },
    addOrderStockToCustomerOrder(){
      if (!(Boolean(this.newOrderedStock.stock_item_id) && Boolean(this.newOrderedStock.quantity))) return false;
      this.orderedStockCost();
      this.newOrderedStock.organization_id = <%= @organization.id %>
      this.newCustomerOrder.ordered_stocks.push(this.newOrderedStock);
      this.newOrderedStock = {};
    },
    findStockItem(id){
      return this.stockItems.find(function(el){
        return el.id == id;
      })
    },
    orderedStockCost(){    
      if (!(Boolean(this.newOrderedStock.stock_item_id) && Boolean(this.newOrderedStock.quantity)))
       this.newOrderedStock.cost = 0;
      else
        this.newOrderedStock.cost = this.newOrderedStock.quantity * this.findStockItem(this.newOrderedStock.stock_item_id).cost;  
    }, 
    toggleShowModal(htmlId){
      $('#'+htmlId).modal('toggle');
    },
    getLocationTypes: function(){
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/location_types.json",
        success: function(res){
          that.locationTypes = res;
        },
        error: function(err){displayAlert(err)}
      });
    },
    getLocations: function(){
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/locations.json",
        success: function(res){
          that.locations = res;
          that.sortedLocations = that.allLocations;
        },
        error: function(err){displayAlert(err)}
      });
    },
    createNewLocation: function(model){
      if (!Boolean(this.newLocation.name)) return false;
      var that = this;
      $.ajax({
        url: "/organizations/<%= @organization.id %>/locations.json",
        data: {
          location: {
            name: that.newLocation.name,
            location_type_id: that.newLocation.locationType.id,
            parent_id: that.newLocation.parent.id,
            organization_id: <%= @organization.id %>
          }
        },
        method: "POST",
        success: function(res){
          // add new location to tree
          that.locations.push(res);
          that.sortedLocations = that.allLocations;
          that.newLocation = {
            locationType: {},
          };
          that.toggleLocationShow(model);
        },
        error: function(err){displayAlert(err)}
      })
    },
    toggleLocationShow(model){
      var str1 = '#new-'+ model +'-body';
      var str2 = '#new-location-'+ model ;
      var first = $(str1).is(':visible') ? str1 : str2;
      var second = $(str1).is(':visible') ? str2 : str1;
      console.log('first: ' + first +", second: " + second);
      $(first).toggle('fast', function(){
        $(second).toggle('fast', function(){
        });
      });
    },
    allLocationsWithLocationType: function (lt_id){
      return this.allLocations.filter(function(el){
        return el.location_type_id == lt_id;
      });
    },
  },
  computed: {
    allLocationTypes: function(){
      return flattenNested(this.locationTypes, ['id', 'name', 'location_type_id', 'parent_id']);
    },
    allLocations: function (){
      return flattenNested(this.locations, ['id', 'name', 'location_type_id', 'parent_id']);
    },
  }
});

$('.menu-item').on('click', function(){
  $('.menu-item').each(function(){
    $(this).removeClass('active');
    $("#"+$(this).attr('id')+"-panel").removeClass('active');      
  });

  $(this).addClass('active');
  $("#"+$(this).attr('id')+"-panel").addClass('active');
});

// Start monitoring cost change for ordered stock
$( ".keyup.cost" ).on('click', function(){
  $("select.keyup").change(function(){
    console.log("dfhjdhfjdf");
    stockManagement.orderedStockCost();
  });
  $( ".keyup.cost" ).keyup(function(){
    stockManagement.orderedStockCost();    
  });
})

stockManagement.getStockTypes();
stockManagement.getStockItems();
stockManagement.getStorages();
stockManagement.getStockSources();
stockManagement.getIncomingStocks()
stockManagement.getStoredItems();
stockManagement.getCustomers();
stockManagement.getCustomerOrders();
stockManagement.getLocationTypes();
stockManagement.getLocations();

$(".date").flatpickr({
  enableTime: true,
  maxDate: new Date(),
  disable: [
    // function(date){ // disable odd days
    //     return date.getDate()%2 > 0;
    // }
  ]
}); // jQuery
</script>