<div id="location_hierarchy">
  <%= render "static_pages/nav" %>
  <div class="green-bg pad1 padb3">
    <h3>Location and Hierarchy</h3>
  </div><br>
  <div class="card raise-1 w90p hcenter neg-marg-top3">
    <div class="ui grid pad-tb1">
      <div class="six wide column">
        <h4>Location hierarchy</h4>
        <hr>
        <div>
          <!-- the demo root element -->
          <div class="" v-for="treeData in locationTypes">
            <item class="item" :model="treeData"></item>
          </div>
        </div>
        <div class="ui button" v-on:click="addRootLocationType()">
          Add level
        </div>
      </div>
      <div class="ten wide column grey-border1">
        <h4>Locations</h4><hr>
        <div v-if="sortedLocations.length < 1">
          No location available
        </div>
        <div v-if="sortedLocations.length > 0">
          Something to show
        </div>
        <div class="ui button green-bg">Add location</div>
      </div>
    </div>
  </div>
  <div id="new-child-modal" class="ui small modal">  
    <div class="content">
      <h3>New location level</h3><hr>
      <div class="form-group w100p-rounded>">
        <label>Name</label> <br>
        <input type="text" placeholder="(e.g. District, Area, Village ...) ">
      </div>
    </div>
    <div class="actions">
      <div class="ui button green-bg" v-on:click="addSubLocationType">Add</div>
      <div class="ui cancel button">Cancel</div>
    </div>
  </div>

  <div id="new-location-modal" class="ui small modal">  
    <div class="content">
      <h3>New location</h3><hr>
      <div class="form-group w100p-rounded>">
        <label>Location type</label> <br>
        <input type="text" placeholder="(e.g. District, Area, Village ...) ">
      </div>
      <div class="form-group w100p-rounded>">
        <label>Name</label> <br>
        <input type="text" placeholder="(e.g. District, Area, Village ...) ">
      </div>
    </div>
    <div class="actions">
      <div class="ui button green-bg" v-on:click="addSubLocationType">Add</div>
      <div class="ui cancel button">Cancel</div>
    </div>
  </div>
</div>
<script type="text/x-template" id="item-template">
  <div>
    <div class="list-item" :class="{bold: isFolder}" @click="toggle">
      {{model.name}}
      <span>
        <i class="chevron up icon" v-show="open"></i>
        <i class="chevron down icon" v-show="!open"></i>
      </span>
    </div>
    <div v-show="open" class="pad-l1">
      <item class="item" v-for="model in model.children" :model="model"> </item>
      <!--<li class="add" @click="addChild">+ Add child</li>-->
      <div class="add ghost" @click="toggleNewChildModal()">+ Add child</div>
    </div>
  </div>
</script>
<script>
  var selectedObj;
  // define the item component
  Vue.component('item', {
    template: '#item-template',
    props: {
      model: Object
    },
    data: function () {
      return {
        open: false
      }
    },
    computed: {
      isFolder: function () {
        return this.model.children &&
          this.model.children.length
      }
    },
    methods: {
      toggle: function () {
        //if (this.isFolder) {
          this.open = !this.open
        //}
      },
      addChild: function () {
        this.model.children.push({
          name: 'new stuff'
        })
      },
      toggleNewChildModal: function(){
        $('#new-child-modal').modal('toggle');
        selectedObj = this.model;
      }
    }
  })

  var locationHierarchy = new Vue({
    el: "#location_hierarchy",
    data: {
      locationTypes: [],
      locations: [],
      sortedLocations: [],
    },
    computed: function(){
      all_location_types: function(){
        // this.locationTypes.each(function(el){
        //   getChildren(el)
        // })
      }
    },
    methods: {
      getChildren: function(arr){
        out = [];
        arr.each(function(){

        })
      },
      getLocationTypes: function(){
        var that = this;
        $.ajax({
          url: "/organizations/<%= @organization.id %>/location_types.json",
          success: function(res){
            that.locationTypes = res;
          },
          error: function(err){
            console.log(err.massage)
          }
        });
      },
      getLocations: function(){
        var that = this;
        $.ajax({
          url: "/organizations/<%= @organization.id %>/locations.json",
          success: function(res){
            that.locations = res;
            that.sortedLocations = res;
          },
          error: function(err){
            console.log(err.massage);
          }
        });
      },
      addRootLocationType: function(){
        selectedObj = null;
        this.toggleNewChildModal();
      },
      addSubLocationType: function(){
        var locationTypeName = $('#new-child-modal input').val();
        var that = this;
        $.ajax({
          url: "/organizations/<%= @organization.id %>/location_types.json",
          data: {
            location_type: {
              name: locationTypeName,
              parent_id: Boolean(selectedObj) ? selectedObj.id : null,
              organization_id: <%= @organization.id %>
            }
          },
          method: "POST",
          success: function(res){
            if ( Boolean(selectedObj))
              selectedObj.children.push(res);
            else
              that.locationTypes.push(res);
            that.toggleNewChildModal();
          },
          error: function(err){
            console.log(err.massage)
          }
        })
      },
      toggleNewChildModal: function(){
        $('#new-child-modal').modal('toggle');
      }
    }
  });

  locationHierarchy.getLocationTypes();
  locationHierarchy.getLocations();
</script>