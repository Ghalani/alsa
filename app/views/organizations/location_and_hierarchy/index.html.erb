<div id="location_hierarchy">
  <%= render "static_pages/nav" %>
  <div class="green-bg pad1 padb3">
    <h3>Location and Hierarchy</h3>
  </div><br>
  <div class="card raise-1 w90p hcenter neg-marg-top3">
    <div class="ui grid pad-tb1">
      <div class="six wide column">
        <h4>Location hierarchy</h4>
        <hr>
        <div>
          <!-- the demo root element -->
          <div class="" v-for="treeData in locationTypes">
            <ul id="demo">
              <item class="item" :model="treeData">
              </item>
            </ul>
          </div>
        </div>
        <div class="ui button" v-on:click="addRootLocationType()">
          Add level
        </div>
      </div>
      <div class="ten wide column grey-border1">
        <h4>Locations</h4>
      </div>
    </div>
  </div>
  <div id="new-child-modal" class="ui small modal">  
    <div class="content">
      <h3>New location level</h3><hr>
      <div class="form-group w100p-rounded>">
        <label>Name</label> <br>
        <input type="text" placeholder="(e.g. District, Area, Village ...) ">
      </div>
    </div>
    <div class="actions">
      <div class="ui button green-bg" v-on:click="addSubLocationType">Add</div>
      <div class="ui cancel button">Cancel</div>
    </div>
  </div>
</div>
<script type="text/x-template" id="item-template">
  <li>
    <div class="list-item" :class="{bold: isFolder}" @click="toggle" @dblclick="changeType">
      {{model.name}}
      <span >[{{open ? '-' : '+'}}]</span>
    </div>
    <ul v-show="open" >
      <item class="item" v-for="model in model.children" :model="model"> </item>
      <!--<li class="add" @click="addChild">+ Add child</li>-->
      <li class="add" @click="toggleNewChildModal()">+ Add child</li>
    </ul>
  </li>
</script>
<script>
  // demo data
  var data = {
    name: 'My Tree',
    children: [
      { name: 'hello' },
      { name: 'wat' },
      {
        name: 'child folder',
        children: [
          {
            name: 'child folder',
            children: [
              { name: 'hello' },
              { name: 'wat' }
            ]
          },
          { name: 'hello' },
          { name: 'wat' },
          {
            name: 'child folder',
            children: [
              { name: 'hello' },
              { name: 'wat' }
            ]
          }
        ]
      }
    ]
  }

  var selectedObj;
  // define the item component
  Vue.component('item', {
    template: '#item-template',
    props: {
      model: Object
    },
    data: function () {
      return {
        open: false
      }
    },
    computed: {
      isFolder: function () {
        return this.model.children &&
          this.model.children.length
      }
    },
    methods: {
      toggle: function () {
        //if (this.isFolder) {
          this.open = !this.open
        //}
      },
      changeType: function () {
        if (!this.isFolder) {
          Vue.set(this.model, 'children', [])
          this.addChild()
          this.open = true
        }
      },
      addChild: function () {
        this.model.children.push({
          name: 'new stuff'
        })
      },
      toggleNewChildModal: function(){
        $('#new-child-modal').modal('toggle');
        selectedObj = this.model;
      }
    }
  })

  var locationHierarchy = new Vue({
    el: "#location_hierarchy",
    data: {
      locationTypes: [

      ],
      treeData: {},
    },
    methods: {
      getLocationTypes: function(){
        var that = this;
        $.ajax({
          url: "/organizations/<%= @organization.id %>/location_types.json",
          success: function(res){
            that.locationTypes = res;
          },
          error: function(err){
            console.log(err.massage)
          }
        });
      },
      addRootLocationType: function(){
        selectedObj = null;
        this.toggleNewChildModal();
      },
      addSubLocationType: function(){
        var locationTypeName = $('#new-child-modal input').val();
        var that = this;
        $.ajax({
          url: "/organizations/<%= @organization.id %>/location_types.json",
          data: {
            location_type: {
              name: locationTypeName,
              parent_id: Boolean(selectedObj) ? selectedObj.id : null,
              organization_id: <%= @organization.id %>
            }
          },
          method: "POST",
          success: function(res){
            if ( Boolean(selectedObj))
              selectedObj.children.push(res);
            else
              that.locationTypes.push(res);
            that.toggleNewChildModal();
          },
          error: function(err){
            console.log(err.massage)
          }
        })
      },
      toggleNewChildModal: function(){
        $('#new-child-modal').modal('toggle');
      }
    }
  });

  locationHierarchy.getLocationTypes();
</script>