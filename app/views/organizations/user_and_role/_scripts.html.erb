<script type="text/x-template" id="tbody-user">
    <table class="ui celled striped table">
      <thead>
        <tr><th>Name</th>
        <th>Email</th>
        <th>Phone</th>
        <th>Role</th></tr>
      </thead>
      <tbody>
        <tr v-for="user in users">
          <td>
            <a :href="'/organizations/<%= @organization.id %>/users/' + user.id">{{user.name}}</a> <i class="ui eye icon float-right" @click.prevent="requestSetUserInfo(user)"></i>
          </td>
          <td>{{user.email}}</td>
          <td>{{user.phone}}</td>
          <td>{{Boolean(user.role) ? user.role.name : "none"}} <i class="ui write icon" @click.prevent="openChangeRoleModal(user)"></i></td>
        </tr>
      </tbody>
    </table>
</script>
 
<script>
  var roleTemplate = {
    permissions: {
      organizations: {},
      farmers: {},
      farms: {},
      labourers: {},
      roles: {},
      memberships: {},
      locations: {},
      location_types: {},
      stock_types: {},
      stock_items: {},
      incoming_stocks: {},
      sources: {},
      stored_stocks: {},
      storages: {},
      customers: {},
      orders: {},
      outgoing_stocks: {},
    }
  };

  var permissions = [
        {
          name: "Farm and Labour",
          models: [
            {
              name: "organizations",
              method: "farm_and_labour",
              message: "Access farm and labour management"
            },
            {
              name: "farmers",
              method: "create",
              message: "Create farmer"
            },
            {
              name: "farms",
              method: "create",
              message: "Create farms"
            },
            {
              name: "labourers",
              method: "create",
              message: "Create labourers"
            },
          ]
        },
        {
          name: "User and Role",
          models: [
            {
              name: "organizations",
              method: "user_and_role",
              message: "Access User and Role management"
            },
            {
              name: "roles",
              method: "create",
              message: "Create role"
            },
            {
              name: "roles",
              method: "update",
              message: "Change role permission"
            },
            {
              name: "roles",
              method: "add_role",
              message: "Change member role"
            },
            {
              name: "roles",
              method: "destroy",
              message: "Delete role"
            },
            {
              name: "memberships",
              method: "create",
              message: "Add member"
            },
            {
              name: "memberships",
              method: "destroy",
              message: "Remove member"
            },
          ]
        },
        {
          name: "Location and Hierarchy",
          models: [
            {
              name: "organizations",
              method: "location_and_hierarchy",
              message: "Access Location and Hierarchy management"
            },
            {
              name: "locations",
              method: "create",
              message: "Create Location"
            },
            {
              name: "location_types",
              method: "create",
              message: "Create Hierarchy"
            },
            {
              name: "locations",
              method: "destroy",
              message: "Delete Location"
            },
            {
              name: "location_types",
              method: "destroy",
              message: "Delete Hierarchy"
            },
          ]
        },
        {
          name: "Stock management",
          models: [
            {
              name: "organizations",
              method: "stock_management",
              message: "Access stock management"
            },
            {
              name: "stock_types",
              method: "create",
              message: "Create and Edit stock-types"
            },
            {
              name: "stock_types",
              method: "destroy",
              message: "Delete stock-types"
            },
            {
              name: "stock_items",
              method: "create",
              message: "Create and Edit stock-items"
            },
            {
              name: "stock_items",
              method: "destroy",
              message: "Delete stock-items"
            },
            {
              name: "incoming_stocks",
              method: "create",
              message: "Create and Edit incoming stocks"
            },
            {
              name: "incoming_stocks",
              method: "destroy",
              message: "Delete incoming stocks"
            },
            {
              name: "sources",
              method: "create",
              message: "Create and Edit sources"
            },
            {
              name: "sources",
              method: "destroy",
              message: "Delete sources"
            },
            {
              name: "stored_stocks",
              method: "create",
              message: "Create and Edit stored stocks"
            },
            {
              name: "stored_stocks",
              method: "destroy",
              message: "Delete stored stocks"
            },
            {
              name: "storages",
              method: "create",
              message: "Create and Edit storages"
            },
            {
              name: "storages",
              method: "destroy",
              message: "Delete storages"
            },
            {
              name: "customers",
              method: "create",
              message: "Create and Edit customers"
            },
            {
              name: "customers",
              method: "destroy",
              message: "Delete customers"
            },
            {
              name: "orders",
              method: "create",
              message: "Create and Edit orders"
            },
            {
              name: "orders",
              method: "destroy",
              message: "Delete orders"
            },
            {
              name: "outgoing_stocks",
              method: "create",
              message: "Process orders"
            },
          ]
        },
      ];


  Vue.component('tbody-user', {
    props: ['users'],
    template: '#tbody-user',
    methods:{
      requestSetUserInfo(user) {
        this.$parent.setUserInfo(user);
        $('#user-info-modal').modal('toggle');        
      },
      openChangeRoleModal: function(user){
        this.$parent.setUserInfo(user);
        $('#change-role-modal').modal('toggle');
      }
    }
  });
  var userRole = new Vue({
    el: "#user-role",
    data: {
      users: [],
      filteredUsers: [],
      userInfo: {},
      roles: [],
      selectedRole: {
        permissions: {}
      },
      cache: roleTemplate,
      newUser: {
        fname: "",
        lname: "",
        phone: "",
        email: ""
      },
      permissions: permissions,
    },
    computed: {
      farmLabourAccessible(){
        return Boolean(this.cache.permissions.organizations.farm_and_labour)
      },
    },
    methods: {
      checkElement(model){
        if (Boolean(this.cache.permissions[model.name][model.method])){
          //console.log('#edit-role-'+ model.name +'-'+ model.method);
          checkElement('#edit-role-'+ model.name +'-'+ model.method);
        }
        return;
      },
      checkAll(){
        var that = this;
        $.map(this.permissions, function(permission, index) {
          $.map(permission.models, function(model, index) {
            that.checkElement(model);
          });
        });
      },
      setCache(data){
        //this.cache = data
        //this.cache = roleTemplate;
        this.cache = Object.assign({}, roleTemplate);
        //this.cache = Object.create(roleTemplate);
        for (var attrname in roleTemplate.permissions) { 
          if (Boolean(data.permissions[attrname]))
            this.cache.permissions[attrname] = (data.permissions[attrname]); 
          else
            this.cache.permissions[attrname] = {};
        }
        // this.cache.permissions = Object.assign(this.cache.permissions, data.permissions);
        this.cache.name = data.name;
        this.cache.id = data.id;
      },
      getUsers: function(){
        var that = this;
        $.ajax({
          url: '/organizations/<%= @organization.id %>/users.json',
          success: function(res){
            res.members.forEach(function(obj, i){
              res.members[i].role = obj.roles.find(function(o){ 
                return o.organization_id == <%= @organization.id %>
              });
              res.members[i].roles = {};
            })
            that.users = res.members
            that.filteredUsers = res.members
          }
        });
      },
      getRoles: function(){
        var that = this;
        $.ajax({
          url: '/organizations/<%= @organization.id %>/roles.json',
          success: function(res){
            that.roles = res
          }
        });
      },
      createRole: function(){
        if (!Boolean(this.cache.name)){
          appendAlert('Please give the new role a name');
          return false;
        }

        var that = this;
        $.ajax({
          method: 'POST',
          data: {role: that.cache},
          url: '/organizations/<%= @organization.id %>/roles.json',
          success: function(res){
            that.roles.push(res);
            that.toggleNewRoleModal();
            that.cache = roleTemplate;
          },
          error: function(err){displayAlert(err)}
        });
      },
      updateRole: function(){
        if (!Boolean(this.cache.name)){
          appendAlert('Please give the role a name');
          return false;
        }

        var that = this;
        $.ajax({
          method: 'PATCH',
          data: {role: that.cache},
          url: '/organizations/<%= @organization.id %>/roles/'+ that.cache.id +'.json',
          success: function(res){
            //that.roles.push(res);
            // update current role in the javascript
            that.findRoleAndUpdate(res)
            that.toggleEditRoleModal();
            that.cache = roleTemplate;
          },
          error: function(err){displayAlert(err)}
        });
      },
      findRoleAndUpdate(newRole){
        this.roles.find(function(role, pos){
          if (role.id == newRole.id){
            console.log("found")
            role.name = newRole.name;
            role.permissions = newRole.permissions;
            return true;
          }
        });
      },
      setUserInfo: function(user){
        this.userInfo = user;
        //$('#user-info-modal.modal').modal('show');
      },
      addRole: function(role){
        var that = this;
        var user = this.userInfo;
        $.ajax({
          method: 'POST',
          url: '/organizations/<%= @organization.id %>/roles/'+role.id+'/add_role.json?user_id='+user.id,
          success: function(res){
            that.users.find(function(u){
              return u == user
            }).role = role;
            $('#change-role-modal').modal('toggle');         
          },
          error: function(err){displayAlert(err)}
        });
      },
      deleteRole(){
        var that = this;
        var user = this.userInfo;
        var role = this.cache;
        $.ajax({
          method: 'DELETE',
          url: '/organizations/<%= @organization.id %>/roles/'+role.id+'.json',
          success: function(res){
            // refresh page OR DELETE from list
            that.roles.splice(that.roles.find(function(el, pos){
              if (el.id == role.id)
                return pos;
            }), 1);
            appendAlert('Role deleted successfully')
            that.toggleDeleteRoleModal();

          },
          error: function(err){displayAlert(err)}
        });
      },
      toggleNewRoleModal: function(){
        $('#new-role-modal.modal').modal('toggle');
      },
      toggleEditRoleModal(){
        $('#edit-role-modal.modal').modal('toggle');
        var that = this;
          setTimeout(function(){
            if($('#edit-role-modal.modal').is(':visible')){
              //that.uncheckAll();
              that.checkAll();
            } else {
              //this.uncheckAll();
            }
          }, 500);      
      },
      toggleDeleteRoleModal(){
        $('#delete-role-modal.modal').modal('toggle');
      },
      uncheckAll(){
        $('#edit-role-modal input').each(function(){
          if ($(this).prop('checked'))
            $(this).prop('checked', false)
        })
      },
      toggleNewUserModal: function(){
        $('#new-user-modal').modal('toggle');
      },
      createUser: function(){
        var that = this;
        $.ajax({
          method: 'POST',
          data: {user: this.newUser},
          url: '/organizations/<%= @organization.id %>/users.json',
          success: function(res){
            that.users.push(res);
            that.newUser = {};
            that.toggleNewUserModal()
          },
          error: function(err){displayAlert(err)}
        })
      }, 
      addUserAsMember: function(){

      },
      selectRole: function(role){
        this.selectedRole = role;
      }
    }
  });
  userRole.getUsers();
  userRole.getRoles();

  function checkElement(id){
    $(id).prop("checked", true);
  }

  $('.item').on('click', function(){
    $('.item').each(function(){
      $(this).removeClass('active');
      $("#"+$(this).attr('id') + "-panel").removeClass('active');      
    });

    $(this).addClass('active');
    $("#"+$(this).attr('id')+"-panel").addClass('active');
  });

  $('.ui.accordion')
    .accordion()
  ;

</script>